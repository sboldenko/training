
attiny2313_timer0_normal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000005c  000000d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000c4  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000074  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e4  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000156  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	0b d0       	rcall	.+22     	; 0x46 <main>
  30:	13 c0       	rjmp	.+38     	; 0x58 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <init_portb>:

#include <avr/io.h>

void init_portb()
{
	PORTB = 0x00;
  34:	18 ba       	out	0x18, r1	; 24
	DDRB = 0x01; // B0 - out
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	87 bb       	out	0x17, r24	; 23
  3a:	08 95       	ret

0000003c <init_timer0>:
}

void init_timer0()
{
	TCCR0B |= (1 << CS02)|~(1 << CS01)|(1 << CS00); // div = 1024
  3c:	83 b7       	in	r24, 0x33	; 51
  3e:	8d 6f       	ori	r24, 0xFD	; 253
  40:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
  42:	12 be       	out	0x32, r1	; 50
  44:	08 95       	ret

00000046 <main>:
}

int main(void)
{	
	init_portb();
  46:	f6 df       	rcall	.-20     	; 0x34 <init_portb>
	init_timer0();
  48:	f9 df       	rcall	.-14     	; 0x3c <init_timer0>
	
    while(1)
    {
        if (TCNT0 <= 127)
  4a:	02 b6       	in	r0, 0x32	; 50
  4c:	07 fc       	sbrc	r0, 7
  4e:	02 c0       	rjmp	.+4      	; 0x54 <main+0xe>
        {
	        PORTB |= (1 << B0);
  50:	c0 9a       	sbi	0x18, 0	; 24
  52:	fb cf       	rjmp	.-10     	; 0x4a <main+0x4>
        }
        else
        {
	        PORTB &= ~(1 << B0);
  54:	c0 98       	cbi	0x18, 0	; 24
  56:	f9 cf       	rjmp	.-14     	; 0x4a <main+0x4>

00000058 <_exit>:
  58:	f8 94       	cli

0000005a <__stop_program>:
  5a:	ff cf       	rjmp	.-2      	; 0x5a <__stop_program>
